apply plugin: 'com.android.application'

/**
 * 读取Git commit number，作为Version Code
 * @return
 */
def gitGitVersionCode() {
    return 'git rev-list HEAD --first-parent --count'.execute().text.trim().toInteger()
}

/**
 * 读取Git Tag，作为Version Name
 * @return
 */
def getGitVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return "1.0.0"
    }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
    }
    //签名配置,自定义,用在defaultConfig中
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }
    //默认配置
    defaultConfig {
        applicationId "com.huyingbao.hyb"
        multiDexEnabled true//支持MultiDex分包
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode gitGitVersionCode()
        versionName getGitVersionName()
        signingConfig signingConfigs.debug
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]// 默认是百度的渠道
        vectorDrawables.useSupportLibrary = true//使用vector图片
    }
    //构建过程
    buildTypes {
        //自定义buildType.name
        debug {
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
            //配置ndk
            ndk {
                abiFilters "arm64-v8a"
                abiFilters "armeabi"
                abiFilters "armeabi-v7a"
                abiFilters "x86"
            }
        }
        //自定义buildType.name
        release {
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
            //配置ndk
            ndk {
                abiFilters "arm64-v8a"
                abiFilters "armeabi"
                abiFilters "armeabi-v7a"
            }
        }
    }

    //修改生成的apk名字及输出目录
    //gradle 4
    applicationVariants.all { variant ->
        variant.outputs.all {
            if ("release".equals(variant.buildType.name))
                outputFileName = "hyb_" + variant.buildType.name + "_" + gitGitVersionCode() + '.apk'
        }
    }

    //数据绑定
    dataBinding {
        enabled = true
    }

    //Dex分包
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"//增加java堆内存大小
    }
    //RetroLambda表达式需要
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
    //hotfix 阿里云仓库
    maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation "junit:junit:${TEST_VERSION}"
    androidTestImplementation "com.android.support.test:runner:${TEST_RUNNER}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${ESPRESSO}"

    //Support Libs
    implementation "com.android.support:support-v4:${SUPPORT_VERSION}"
    implementation "com.android.support:appcompat-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:design:${SUPPORT_VERSION}"
    implementation "com.android.support:recyclerview-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:gridlayout-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:cardview-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:support-annotations:${SUPPORT_VERSION}"
    implementation "com.android.support:support-vector-drawable:${SUPPORT_VERSION}"
    //Constraint
    implementation "com.android.support.constraint:constraint-layout:${CONSTRAINT}"

    //MultiDex分包
    implementation "com.android.support:multidex:${MULTIDEX}"

    //Dagger2
    implementation "com.google.dagger:dagger:${DAGGER}"
    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"

    //网络Retrofit
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT}"
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT}"

    //网络OkHttp,OkIo
    implementation "com.squareup.okio:okio:${OKIO}"
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP}"

    //图片上传
    implementation "com.qiniu:qiniu-android-sdk:${QINIU_SDK}"

    //图片加载,加载使用OkHttp
    implementation "com.github.bumptech.glide:glide:${GLIDE}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${GLIDE}"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE}"

    //ButterKnife,view注解,string注解,drawable注解
    implementation "com.jakewharton:butterknife:${BUTTER_KNIFE}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTER_KNIFE}"

    //RxPermissions
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:${RX_PERMISSIONS_2}"
    //RxLifecycle
    implementation "com.trello.rxlifecycle2:rxlifecycle:${RX_LIFE_CYCLE_2}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:${RX_LIFE_CYCLE_2}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:${RX_LIFE_CYCLE_2}"
    //RxBinding
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:${RX_BINDING_2}"

    //RecyclerView Adapter
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    //分割线
    implementation "com.yqritc:recyclerview-flexibledivider:${FLEXIBLE_DIVIDER}"
    //图片缩放
    implementation "com.github.chrisbanes:PhotoView:${PHOTO_VIEW}"

    //Logger
    implementation "com.orhanobut:logger:${ORHANOBUT_LOGGER}"

    //Json
    implementation "com.alibaba:fastjson:${FAST_JSON}"
    implementation "com.google.code.gson:gson:${GSON}"

    //Common lang 常用工具类
    implementation "org.apache.commons:commons-lang3:${COMMONS_LANG3}"

    //Hotfix Analytics
    implementation "com.aliyun.ams:alicloud-android-hotfix:${HOTFIX}"
    implementation("com.aliyun.ams:alicloud-android-man:${ANALYTICS}") {
        exclude(module: 'utdid4all')
    }

    //Stetho 调试
    implementation "com.facebook.stetho:stetho-okhttp3:${STETHO}"

    //内存溢出
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"

    //RxFlux2
    implementation "com.github.coolfire2015:RxFlux2:${RxFlux2}"
}
